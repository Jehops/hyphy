RequireVersion("2.25");

//------------------------------------------------------------------------------ 

function selection._aux.io.countBranchSets(key, value) {
    available_models[value] += 1;
    return None;
}

function selection._aux.io.mapBranchSets(key, value) {
    (tree_for_analysis["model_map"])[key] = branch_set[value];
    (return_set[branch_set[value]])[key] = 1;
    return None;
}

function selection._aux.io.fillInDefaultSelection(key, value) {
    if (tag == value || tag == None) {
        return_set[key && 1] = TRUE;
    }
    return None;
}

//------------------------------------------------------------------------------ 
function selection.io.defineBranchSets(tree_for_analysis) {

    available_models = {};
    branch_set = {};

    for (k = 0; k < Columns(tree_for_analysis["model_list"]); k += 1) {
        available_models[(tree_for_analysis["model_list"])[k]] = 0;
    }

    (tree_for_analysis["model_map"])["selection._aux.io.countBranchSets"][""];

    list_models = Rows(available_models); // get keys    
    option_count = Columns(list_models);

    selectTheseForTesting = {
        option_count + 3, 2
    };

    selectTheseForTesting[0][0] = "All";
    selectTheseForTesting[0][1] = "Include all branches in the analysis";
    selectTheseForTesting[1][0] = "Internal";
    selectTheseForTesting[1][1] = "Include all internal branches in the analysis";
    selectTheseForTesting[2][0] = "Leaves";
    selectTheseForTesting[2][1] = "Include all leaf branches in the analysis";

    for (k = 0; k < Columns(list_models); k += 1) {
        if (list_models[k] != "") {
            selectTheseForTesting[3 + k][0] = list_models[k];
            selectTheseForTesting[3 + k][1] = "Set " + list_models[k] + " with " + available_models[list_models[k]] + " branches";
        } else {
            selectTheseForTesting[3 + k][0] = "Unlabeled branches";
            selectTheseForTesting[3 + k][1] = "Set of " + available_models[list_models[k]] + " unlabeled branches";
        }
    }

    ChoiceList(testSet, "Choose the set of branches to test for selection", 1, NO_SKIP, selectTheseForTesting);

    assert(testSet >= 0, "User cancelled branch selection; analysis terminating");

    return_set = {};

    if (testSet < 3) {
        if (testSet == 0) {
            tag = None;
        } else {
            if (testSet == 1) {
                tag = "internal";
            } else {
                tag = "leaf";
            }
        }
        (tree_for_analysis["partitioned"])["selection._aux.io.fillInDefaultSelection"][""];
    } else {
        tag = SELECTION_STRINGS;
        if (tag == "Unlabeled branches") {
            tag = "";
        }
        (tree_for_analysis["model_map"])["selection._aux.io.fillInDefaultSelection"][""];
    }

    return return_set;

}

//------------------------------------------------------------------------------ 

function selection.io.startTimer(timers, key, sort_index) {
    timers[key] = {
        "timer": Time(1),
        "order": sort_index
    };

}

//------------------------------------------------------------------------------ 

function selection.io.stopTimer(timers, key) {
    (timers[key])["timer"] = Time(1) - (timers[key])["timer"];
}

//------------------------------------------------------------------------------ 

function selection.io.extract_global_MLE(fit, id) {
    return ((fit["global"])[id])["MLE"];
}

//------------------------------------------------------------------------------ 

function selection.io.branch.length(branch_info) {
    return branch_info["MLE"];
}

//------------------------------------------------------------------------------------------------------------------------

function selection.io.getIC(logl, params, samples) {
    return -2 * logl + 2 * samples / (samples - params - 1) * params;
}


//------------------------------------------------------------------------------ 

function selection.io.json_store_lf(json, name, ll, df, ss, rate_distribution) {

    utility.dict.ensure_key(json, dict_key);
    if (Abs(json[terms.json.fits]) == 0) {
        json[terms.json.fits] = {};
    }

    selection.io.json_store_key_value_pair(json, terms.json.fits, name, {
        terms.json.log_likelinhood: ll,
            terms.json.parameters: df,
            terms.json.AICc: selection.io.getIC(ll, df, ss),
            terms.json.rate_distributions: rate_distribution,
            terms.json.display_order: Abs(json[terms.json.fits])
    });

}

//------------------------------------------------------------------------------ 

function selection.io.json_store_key_value_pair(json, dict_key, key, value) {

    if (None == dict_key) {
        json[key] = value;
    } else {
        utility.dict.ensure_key(json, dict_key);
        (json[dict_key])[key] = value;
    }
}

//------------------------------------------------------------------------------ 

function selection.io.json_store_branch_attribute(json, attribute_name, attribute_type, display_order, partition, values) {
    utility.dict.ensure_key(json, terms.json.branch_attributes); 
    utility.dict.ensure_key(json[terms.json.branch_attributes], partition); 
    utility.dict.ensure_key(json[terms.json.branch_attributes], terms.json.attribute.meta);
    utility.dict.ensure_key((json[terms.json.branch_attributes])[terms.json.attribute.meta], attribute_name);
    ((json[terms.json.branch_attributes])[terms.json.attribute.meta])[attribute_name] = {terms.json.attribute.meta.type : attribute_type,
                                                                                            terms.json.attribute.meta.order: display_order}; 
    
    utility.forEach (utility.keys (values), "selection.io.json_store_branch_attribute.branch_name",
                             "utility.dict.ensure_key ((json[terms.json.branch_attributes])[partition], selection.io.json_store_branch_attribute.branch_name)");
                             
    utility.forEach (utility.keys (values), "selection.io.json_store_branch_attribute.branch_name",
                             "(((json[terms.json.branch_attributes])[partition])[selection.io.json_store_branch_attribute.branch_name])[attribute_name] = values[selection.io.json_store_branch_attribute.branch_name]");
 }


//------------------------------------------------------------------------------------------------------------------------

function selection.io._aux.extract_branch_info.callback(key, value) {
    selection.io.extract_branch_info_result[key] = utility.callFunction(callback, {
        "0": "value"
    });
}

function selection.io.extract_branch_info(branch_spec, callback) {
    selection.io.extract_branch_info_result = {};
    branch_spec["selection.io._aux.extract_branch_info.callback"][""];
    return selection.io.extract_branch_info_result;
}

function selection.io.branch.length(branch_info) {
    return branch_info["MLE"];
}