//------------------------------------------------------------------------------

lfunction ComputeOnGrid (lf_id, grid, handler, callback) {
    jobs = mpi.PartitionIntoBlocks(grid);

    scores = {};

    queue  = mpi.CreateQueue ({^"terms.mpi.LikelihoodFunctions": {{lf_id}},
                               ^"terms.mpi.Headers" : utility.GetListOfLoadedModules ("libv3/")});

    for (i = 1; i < Abs (jobs); i += 1) {
        mpi.QueueJob (queue, handler, {"0" : lf_id,
                                       "1" : jobs [i],
                                       "2" : &scores}, callback);
    }

    Call (callback, -1, Call (handler, lf_id, jobs[0], &scores), {"0" : lf_id, "1" : jobs [0], "2" : &scores});

    mpi.QueueComplete (queue);

    return scores;

}

//------------------------------------------------------------------------------


lfunction pass1.result_handler (node, result, arguments) {
    utility.Extend (^(arguments[2]), result);
}

//------------------------------------------------------------------------------

lfunction pass1.evaluator (lf_id, tasks, scores) {
    LFCompute (^lf_id, LF_START_COMPUTE);

    results = {};
    task_ids = utility.Keys (tasks);
    task_count = Abs (tasks);
    for (i = 0; i < task_count; i+=1) {
        parameters.SetValues (tasks[task_ids[i]]);
        LFCompute (^lf_id, ll);
        results [task_ids[i]] = ll;
    }

     LFCompute (^lf_id, LF_DONE_COMPUTE);

    return results;
}

//------------------------------------------------------------------------------

lfunction pass2.evaluator (lf_id, tasks, scores) {

    results = {};
    task_ids = utility.Keys (tasks);
    task_count = Abs (tasks);
    for (i = 0; i < task_count; i+=1) {
        parameters.SetValues (tasks[task_ids[i]]);
        ConstructCategoryMatrix(site_likelihoods,^lf_id,SITE_LOG_LIKELIHOODS);
        results [task_ids[i]] = site_likelihoods ["Max(_MATRIX_ELEMENT_VALUE_,-1e200)"];
        // to avoid returning -inf
    }


    return results;


}

