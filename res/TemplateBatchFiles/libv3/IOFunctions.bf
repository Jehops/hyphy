LoadFunctionLibrary("libv3/UtilityFunctions.bf");
LoadFunctionLibrary("convenience/regexp.bf");

/**
 * @name io.CheckAssertion
 * @param statement
 * @param error_msg
 */
function io.CheckAssertion(statement, error_msg) {
    ExecuteCommands("assert (`statement`, error_msg)");
}

/**
 * @name io.PromptUser
 * @param statement
 * @param default
 * @param lower_bound
 * @param upper_bound
 * @param is_integer
 */
lfunction io.PromptUser(prompt,
    default, lower_bound, upper_bound, is_integer) {
    value = lower_bound - 1;

    while (value < lower_bound || value > upper_bound) {

        fprintf(stdout, prompt, " (permissible range = [", lower_bound, ",", upper_bound, "], default value = ",
            default);
        if (is_integer) {
            fprintf(stdout, ", integer");
        }
        fprintf(stdout, "): ");
        fscanf(stdin, "String", str_val);

        if (Abs(str_val) == 0) {
            value = 0 +
                default;
        } else {
            value = 0 + str_val;
        }
        if (is_integer) {
            value = value $ 1;
        }
    }
    return value;
}

/**
 * @name io.SpoolLF
 * @param lf_id
 * @param trunk_path
 * @param tag
 * @returns nothing
 */
lfunction io._reportMessageHelper(analysis, text) {
    if (Abs(analysis)) {
        return "[`analysis`] `text`";
    } else {
        return text;
    }
}

/**
 * @name io.SpoolJSON
 * @param json
 * @param file
 */
lfunction io.SpoolJSON(json, file) {
    utility.ToggleEnvVariable("USE_JSON_FOR_MATRIX", 1);
    if (Type(file) == "String") {
        fprintf(file, CLEAR_FILE, json);
    } else {
        fprintf(stdout, "\n", json, "\n");
    }
    utility.ToggleEnvVariable("USE_JSON_FOR_MATRIX", None);
}

/**
 * TODO: Does not support arrays in JSON
 * Parses json from file_path
 * @name io.ParseJSON
 * @param file
 */
lfunction io.ParseJSON(file_path) {
    fscanf(file_path, "Raw", test);
    parsed_test = Eval(test);
    return parsed_test;
}

/**
 * @name io.ReportProgressMessage
 * @param analysis
 * @param text
 */
lfunction io.ReportProgressMessage(analysis, text) {
    fprintf(stdout, io._reportMessageHelper(analysis, text), "\n");
}

/**
 * @name io.ReportAnalysisStageMD
 * @param stage
 */
lfunction io.ReportAnalysisStageMD(stage) {
    fprintf(stdout, "\n>", stage, "\n\n");
}

/**
 * @name io.ReportProgressMessageMD
 * @param analysis
 * @param stage
 * @param text
 */
lfunction io.ReportProgressMessageMD(analysis, stage, text) {
    if (Abs(cache) == 0) {
        cache = {};
    }
    advance = TRUE;
    utility.EnsureKey(cache, analysis);

    if (utility.Has (cache[analysis],stage,"Number")) {
        advance = FALSE;
    }

    (cache[analysis])[stage] += 1;

    if (advance) {
        if (Abs(cache[analysis]) == 1) {
            fprintf(stdout, "\n");
        }
        fprintf(stdout, "\n### ", text, "\n");
    } else {
        fprintf(stdout, text, "\n");
    }
}

/**
 * Reports stats generated from math.GatherDescriptiveStats
 * @name io.ReportStatsMD
 * @param label - Typically the name of the method used
 * @param stats - The stats dict generated by math.GatherDescriptiveStats
 */
lfunction io.ReportStatsMD(_label, _stats) {

    _table_output_options = {
        "header": 1,
        "min-column-width": 16,
        "align": "center",
        "column-widths": {
            "0": 16,
            "1": 16,
            "2": 16,
            "3": 16,
            "4": 16,
            "5": 16,
            "6": 19
        }
    };

    _results = {
        Abs(_stats),
        2
    };
    _keys = utility.Keys(_stats);

    for (_k = 0; _k < Abs(_stats); _k = _k + 1) {
        _results[_k][0] = _keys[_k];
        _results[_k][1] = _stats[_keys[_k]];
    }

    _header = {
        2,
        1
    };
    _header[0] = "Metric";
    _header[1] = "Value";
    fprintf(stdout, io.FormatTableRow(_header, _table_output_options));
    _table_output_options["header"] = FALSE;

    for (_k = 0; _k < Abs(_stats); _k = _k + 1) {
        _tmp_matrix = {
            2,
            1
        };
        _tmp_matrix[0] = _results[_k][0];
        _tmp_matrix[1] = Format(_results[_k][1], 3, 3);
        fprintf(stdout, io.FormatTableRow(_tmp_matrix, _table_output_options));
    }

    return 0;
}

/**
 * @name io.ReportProgressBar
 * @param analysis
 * @param text
 */
lfunction io.ReportProgressBar(analysis, text) {
    SetParameter(STATUS_BAR_STATUS_STRING, io._reportMessageHelper(analysis, text), 0);
}

/**
 * @name io.validate_a_list_of_files
 * @param list
 */
lfunction io.validate_a_list_of_files(list) {
    result = {};
    dim = utility.Array1D (list);

    for (i = 0; i < dim; i += 1) {
        if (Abs(list[i])) {
            fn = list[i];
            io.CheckAssertion("!`&fn`", "HyPhy cannot open '" + fn + "' for reading");
            result + fn;
        }
    }
    return result;
}

/**
 * @name io.format_object
 * @param object
 * @param options
 */
lfunction io.format_object(object, options) {

    if (Type(object) == "String") {
        return object;
    }
    if (Type(object) == "Number") {
        if (None != options) {
            if (Abs(options["number-precision"]) > 0) {
                return Eval("Format (`&object`, 0, " + options["number-precision"] + ")");
            }
        }
    }

    return "" + object;
}

/**
 * @name io.FormatTableRow
 * @param row
 * @param options
 */
lfunction io.FormatTableRow(row, options) {

    if (None == options) {
        options = {};
    }

    cells = utility.Map(row, "_value_", "io.format_object(_value_, `&options`)");

    min_width = Max(3, options["min-column-width"]);

    underline_chars = {
        {
            "-",
            "-",
            "-"
        }
    };
    dim = utility.Array1D(cells);

    row = "";
    row * 128;
    if (options["header"]) {
        underlines = "";
        underlines * 128;
        widths = {};

        if (options["align"] == "center") {
            underline_chars[0] = ':';
            underline_chars[2] = ':';
        } else {
            if (options["align"] == "right") {
                underline_chars[2] = ':';
            }

        }
        for (i = 0; i < dim; i += 1) {
            content_width = Abs(cells[i]);
            cell_width = Max(min_width, content_width);
            widths + cell_width;
            row * "|";
            padding = cell_width - content_width;

            for (k = 0; k < padding$2; k += 1) {
                row * " ";
            }
            row * cells[i];
            for (k = 0; k < padding - padding$2; k += 1) {
                row * " ";
            }
            underlines * "|";
            underlines * underline_chars[0];
            for (k = 1; k < cell_width - 1; k += 1) {
                underlines * underline_chars[1];
            }
            underlines * underline_chars[2];
        }
        row * "|";
        underlines * "|";
        underlines * 0;
        row * "\n";
        row * underlines;
        row * "\n";
        options["column-widths"] = widths;
    } else {
        for (i = 0; i < dim; i += 1) {
            content_width = Abs(cells[i]);
            cell_width = (options["column-widths"])[i];

            row * "|";
            if (cell_width <= content_width + 3) {
                cells[i] = (cells[i])[0][cell_width - 4] + "...";
                padding = 0;
            } else {
                padding = cell_width - content_width;
            }
            for (k = 0; k < padding$2; k += 1) {
                row * " ";
            }
            row * cells[i];
            for (k = 0; k < padding - padding$2; k += 1) {
                row * " ";
            }
        }
        row * "|\n";
    }
    row * 0;
    return row;
}

/**
 * @name io.get_a_list_of_files
 * @param filename
 */
function io.get_a_list_of_files(filename) {
    if (Type(filename) == "String") {
        if (!filename) { // filename exists
            fscanf(filename, REWIND, "Lines", io.get_a_list_of_files.list);
            return io.validate_a_list_of_files(io.get_a_list_of_files.list);
        }
    }

    io.get_a_list_of_files.result = {};
    io.PrintAndUnderline("Enter paths to files (blank line to end entry)", "-");
    while (1) {
        fprintf(stdout, "* File ", Abs(io.get_a_list_of_files.result) + 1, " [relative path `PATH_TO_CURRENT_BF`]:");
        io.get_a_list_of_files.current_path = "";
        fscanf(stdin, "String", io.get_a_list_of_files.current_path);
        if (Abs(io.get_a_list_of_files.current_path)) {
            io.CheckAssertion("! io.get_a_list_of_files.current_path", "HyPhy cannot open '" + io.get_a_list_of_files.current_path + "' for reading");
        } else {
            break;
        }
        io.get_a_list_of_files.result + io.get_a_list_of_files.current_path;
    }
}

/**
 * @name io.DisplayAnalysisBanner
 * @param analysis_info
 */
lfunction io.DisplayAnalysisBanner(analysis_info) {
    if (io.HasStringKey("info", analysis_info)) {
        io.PrintAndUnderline("Analysis Description", "-");
        fprintf(stdout, io.FormatLongStringToWidth(analysis_info["info"], 72), "\n");
    }
    if (io.HasStringKey("requirements", analysis_info)) {
        fprintf(stdout, "\n- __Requirements__: ");
        fprintf(stdout, io.FormatLongStringToWidth(analysis_info["requirements"], 72), "\n");
    }
    if (io.HasStringKey("reference", analysis_info)) {
        fprintf(stdout, "\n- __Citation__: ");
        fprintf(stdout, io.FormatLongStringToWidth(analysis_info["reference"], 72), "\n");
    }
    if (io.HasStringKey("authors", analysis_info)) {
        fprintf(stdout, "\n- __Written by__: ");
        fprintf(stdout, io.FormatLongStringToWidth(analysis_info["authors"], 72), "\n");
    }
    if (io.HasStringKey("contact", analysis_info)) {
        fprintf(stdout, "\n- __Contact Information__: ");
        fprintf(stdout, io.FormatLongStringToWidth(analysis_info["contact"], 72), "\n");
    }
    if (io.HasStringKey("version", analysis_info)) {
        fprintf(stdout, "\n- __Analysis Version__: ");
        fprintf(stdout, io.FormatLongStringToWidth(analysis_info["version"], 72), "\n");
    }
    fprintf(stdout, "\n");

    return None;
}

/**
 * @name io.HasStringKey
 * @param key
 * @param dict
 */
lfunction io.HasStringKey(key, dict) {
    return Type(dict[key]) == "String";
}

/**
 * @name io.SpoolLF
 * @param lf_id
 * @param trunk_path
 * @param tag
 * @returns nothing
 */
lfunction io.SpoolLF(lf_id, trunk_path, tag) {

    Export(__lf_spool, ^ lf_id);
    if (tag == None) {
        tag = lf_id;
    }
    fprintf(trunk_path + "." + tag + ".bf", CLEAR_FILE, __lf_spool);
}

/**
 * @name io.PrintAndUnderline
 * @param string
 * @param char
 * @returns nothing
 */
lfunction io.PrintAndUnderline(string, char) {
    fprintf(stdout, "\n", string, "\n");
    buffer = "";
    buffer * (1 + Abs(string));
    for (k = 0; k < Abs(string); k += 1) {
        buffer * char[0];
    }
    buffer * 0;
    fprintf(stdout, buffer, "\n");
}

/**
 * @name io.FormatLongStringToWidth
 * @param {String} string
 * @param {Number} width
 * @returns {String} formatted string
 */
function io.FormatLongStringToWidth(string, width) {
    words = regexp.Split(string, "[\\ \n]+");
    lines = {};

    current_line = "";
    words_in_current_line = 0;
    for (i = 0; i < Abs(words); i += 1) {
        if (words_in_current_line == 0) {
            current_line = words[i];
            words_in_current_line = 1;
        } else {
            if (Abs(current_line) + Abs(words[i]) + 1 <= width) {
                words_in_current_line += 1;
                current_line += " " + words[i];
            } else {
                lines + current_line;
                words_in_current_line = 0;
                current_line = "";
                i = i - 1;
            }
        }
    }

    if (words_in_current_line) {
        lines + current_line;
    }

    return Join("\n", lines);
}

/**
 * I am tired of typing fprintf (stdout, ...)
 * @returns nothing
 */
lfunction console.log (arg) {
    fprintf (stdout, arg, "\n");
    return res;
}

/**
 * I am tired of typing fprintf (MESSAGE_LOG, ...)
 * @returns nothing
 */
lfunction messages.log (arg) {
    fprintf (MESSAGE_LOG, arg, "\n");
    return res;
}

/**
 * Checks if there is a file exists
 * @param {String} path the path to check
 * @returns {Number} TRUE if file exists and is readable; FALSE otherwise
 */

lfunction io.FileExists  (path) {
    return !path;
}

/**
 * Checks if there is a cache file; creates if empty
 * @param {String} path  the path to the cache file; will be created if it doesn't exist
 * @returns {Dict} the contents of the file
 */
lfunction io.LoadCacheFromFile  (path) {
    if (io.FileExists (path) == TRUE) { // exists
        fscanf (path, REWIND, "Raw", contents);
        contents =  Eval (contents);
        if (Type (contents) == "AssociativeList") {
            return contents;
        }
    } else {
        fprintf (path, CLEAR_FILE, {});
    }
    return {};
}

/**
 * Checks if there is a cache file; creates if empty
 * @param {String} path  the path to the cache file; will be created if it doesn't exist
 * @param {Dict} data  the contents of the cache to save to a file
 * @returns nothing
 */
lfunction io.WriteCacheToFile  (path, data) {
    fprintf (path, CLEAR_FILE, data);
}
