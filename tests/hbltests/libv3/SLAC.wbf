LoadFunctionLibrary("libv3/UtilityFunctions.bf");
LoadFunctionLibrary("libv3/convenience/math.bf");

GLOBAL_FPRINTF_REDIRECT = "/dev/null";
LoadFunctionLibrary ("SelectionAnalyses/SLAC.bf", {"0" : "Universal", "1" : PATH_TO_CURRENT_BF + "data/CD2.nex", "2" : "All", "3": "100", "4": "0.1"});
GLOBAL_FPRINTF_REDIRECT = "";


margin_of_error = .05;

function check_keys() {
    // Ensure that all top-level keys exists
    assert(utility.keyExists(slac.json, "fits"), "fits not found");
    assert(utility.keyExists(slac.json, "timers"), "timers not found");
    assert(utility.keyExists(slac.json, "trees"), "trees not found");
    assert(utility.keyExists(slac.json, "partitions"), "partitions not found");
    assert(utility.keyExists(slac.json, "branch attributes"), "branch attributes not found");
    assert(utility.keyExists(slac.json, "MLE"), "MLE not found");
    assert(utility.keyExists(slac.json, "sample-median"), "sample-median not found");
    assert(utility.keyExists(slac.json, "sample-2.5"), "sample-2.5 not found");
    assert(utility.keyExists(slac.json, "sample-97.5"), "sample-97.5 not found");
}


// Check Global MG94xREV results
function check_global_mg94_results() {
    mg94 = (slac.json["fits"])["Global MG94xREV"];
    expected_loglikelihood = -3467.072352344857; 
    assert(Abs(mg94["log likelihood"] - expected_loglikelihood) <= margin_of_error, "Log likelihood is substantially different expected");
    assert(mg94["parameters"] == 31, "number parameters not 31");

    //TODO: Make dn/ds ratio a friendlier key
    dnds = (mg94["rate distributions"])["non-synonymous/synonymous rate ratio for *test*"];
    expected_dns = 1.00901487446916;
    assert(Abs(dnds[0] - expected_dns) <= margin_of_error, "dN/dS is substantially different expected");
}


// Trees
function check_tree_results() {
    trees = slac.json["trees"];
    // ensure tested and newick exists
    assert(utility.keyExists(trees, "newick"), "newick not found");
    assert(utility.keyExists(trees, "tested"), "tested not found");
}

// Branch Attributes
// Ensure each node has attributes only specified in attributes
function node_assertion(node, attribute_keys) {
    node_keys = utility.keys(node);
    find_values = utility.map(node_keys, "_key_",
    "utility.array.find(attribute_keys, _key_)");
    elems = utility.filter (find_values, "_value_", "_value_ == -1");
    assert(Abs(elems) == 0, "node has undefined attribute");
}

function check_branch_attributes() {

    branch_attributes = (slac.json["branch attributes"])["attributes"];
    attribute_keys = utility.keys(branch_attributes);
    branch_nodes = (slac.json["branch attributes"])["0"];

    utility.forEachPair(branch_nodes, "_key_", "_node_", "node_assertion(_node_,attribute_keys);");

    // Spot check some branch values 
    expected_baboon_length = 0.001712680876653717;

    actual_baboon_length = (branch_nodes["BABOON"])["Global MG94xREV model"];
    assert(Abs(expected_baboon_length - actual_baboon_length) <= margin_of_error,
    "wrong baboon branch length");

    baboon_substitution_count = math.sum((branch_nodes["BABOON"])["synonymous substitution count"]);
    assert(baboon_substitution_count == 1, "unexpected number of substitutions in BABOON");

}

// MLE -- TODO: We should check all results, but reading JSON with arrays from a
// file is currently not supported
function check_mle_results() {

    mle = (((slac.json["MLE"])["content"])["0"]);
    mle_sites = mle["by-site"];
    mle_branches = mle["by-branch"];

    mle_site_averaged = utility.matrix_to_list_of_rows(mle_sites["AVERAGED"]);
    mle_site_resolved = utility.matrix_to_list_of_rows(mle_sites["RESOLVED"]);

    mle_branch_averaged = utility.matrix_to_list_of_rows(mle_branches["AVERAGED"]);
    mle_branch_resolved = utility.matrix_to_list_of_rows(mle_branches["RESOLVED"]);


    // averaged expected at site 2
    site_two_averaged = {{0.3164762974660306, 1.107667041131107, 0, 0, 0, 0, 0,
    0, 1,1, 1.469689356952376}};

    site_two_averaged_sum = math.sum(site_two_averaged);

    actual_stas = math.sum(mle_site_averaged[2]);

    assert(Abs(site_two_averaged_sum - actual_stas) < margin_of_error, "site two
    mle averaged a bit different than expected");


    // resolved expected at site 2
    site_two_resolved = {{0.3164762974660306, 1.107667041131107, 0, 0, 0, 0, 0,
    0, 1, 1, 1.469689356952376}};

    site_two_resolved_sum = math.sum(site_two_resolved);

    actual_strs = math.sum(mle_site_resolved[2]);
    assert(Abs(site_two_resolved_sum - actual_strs) < margin_of_error, "site two
    mle averaged a bit different than expected");


    // averaged expected at site 5
    site_five_averaged =  {{ 0.4109925319153322, 2.589007468084667, 2, 6,
    0.1369975106384441, 4.866268471301605, 2.317490418225316,
    -1.477152420790018, 0.9155151026839652, 0.301582822813361,
    1.725467201084868}};

    site_five_averaged_sum = math.sum(site_five_averaged);
    actual_sfas = math.sum(mle_site_averaged[5]);

    assert(Abs(site_five_averaged_sum - actual_sfas) < margin_of_error, "site
    five mle averaged a bit different than expected");


    // resolved expected at site 5
    site_five_resolved = {{0.4109925319153322, 2.589007468084667, 2, 6,
    0.1369975106384441, 4.866268471301605, 2.317490418225316,
    -1.477152420790018, 0.9155151026839652, 0.301582822813361,
    1.725467201084868}};

    site_five_resolved_sum = math.sum(site_five_resolved);

    actual_sfrs = math.sum(mle_site_resolved[5]);
    assert(Abs(site_five_resolved_sum - actual_sfrs) < margin_of_error, "site
    five mle resolved a bit different than expected");


    // averaged expected at branch 2
    branch_two_averaged = {{127.4480554142889, 479.202079390369, 9, 31,
    0.2100849371035372, 0.07061700526339267, 0.06469087120706479,
    -0.004032235811121753, 0.6757502943780094, 0.4699319961488463,
    1.469689356952376}};

    branch_two_averaged_sum = math.sum(branch_two_averaged);

    actual_btas = math.sum(mle_branch_averaged[2]);
    assert(Abs(branch_two_averaged_sum - actual_btas) < margin_of_error, "branch two
    mle averaged a bit different than expected");


    // resolved expected at branch 2
    branch_two_resolved = {{127.4480554142889, 479.202079390369, 9, 31,
    0.2100849371035372, 0.07061700526339267, 0.06469087120706479,
    -0.004032235811121753, 0.6757502943780094, 0.4699319961488463,
    1.469689356952376}};

    branch_two_resolved_sum = math.sum(branch_two_resolved);

    actual_btrs = math.sum(mle_branch_resolved[2]);
    assert(Abs(branch_two_resolved_sum - actual_btrs) < margin_of_error, "branch two
    mle resolved a bit different than expected");


    // averaged expected at branch 5
    branch_five_averaged =  {{114.5555555555554, 415.7222222222221, 7.5, 18.5,
    0.2160293347302251, 0.06547041707080514, 0.04450086863557399,
    -0.01215296843779284, 0.8643787187173687, 0.2528416485727941,
    1.725467201084868}};

    branch_five_averaged_sum = math.sum(branch_five_averaged);
    actual_bfas = math.sum(mle_branch_averaged[5]);

    assert(Abs(branch_five_averaged_sum - actual_bfas) < margin_of_error,
    "branch five mle averaged a bit different than expected");

    // resolved expected at branch 5
    branch_five_resolved = {{114.5555555555554, 415.7222222222221, 7.5, 18.5,
    0.2160293347302251, 0.06547041707080514, 0.04450086863557399,
    -0.01215296843779284, 0.8643787187173687, 0.2528416485727941,
    1.725467201084868}};

    branch_five_resolved_sum = math.sum(branch_five_resolved);

    actual_bfrs = math.sum(mle_branch_resolved[5]);
    assert(Abs(branch_five_resolved_sum - actual_bfrs) < margin_of_error, "branch five mle resolved a bit different than expected");

    return 1;

}

check_keys();
check_global_mg94_results();
check_tree_results();
check_mle_results();
